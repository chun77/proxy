"CONNECT" using switchproxyomega:
1: "CONNECT www.googleapis.com:443 HTTP/1.1" from 174.109.104.187 @ Sat Mar  2 23:02:45 2024
1: Responding "HTTP/1.1 200 Connection Established" to the client
2: "CONNECT clients4.google.com:443 HTTP/1.1" from 174.109.104.187 @ Sat Mar  2 23:02:45 2024
2: Responding "HTTP/1.1 200 Connection Established" to the client
3: "CONNECT www.notion.so:443 HTTP/1.1" from 174.109.104.187 @ Sat Mar  2 23:02:45 2024
4: "CONNECT neat-iodine-05e.notion.site:443 HTTP/1.1" from 174.109.104.187 @ Sat Mar  2 23:02:45 2024
5: "CONNECT optimizationguide-pa.googleapis.com:443 HTTP/1.1" from 174.109.104.187 @ Sat Mar  2 23:02:45 2024
6: "CONNECT www.notion.so:443 HTTP/1.1" from 174.109.104.187 @ Sat Mar  2 23:02:45 2024
3: Responding "HTTP/1.1 200 Connection Established" to the client
5: Responding "HTTP/1.1 200 Connection Established" to the client
6: Responding "HTTP/1.1 200 Connection Established" to the client
4: Responding "HTTP/1.1 200 Connection Established" to the client

GET Cache policy:(Generated by mocky, visit by firefox)
1.Successful Response

Status Code: 200 OK
Content Type: text/html
Response Body: <html><body>Hello World</body></html>
Header Information: Cache-Control: max-age=120
This test case is used to verify whether the caching proxy can correctly cache and serve the content within its validity period.

log:
first request:
34: "GET http://run.mocky.io/v3/056e5bc1-b39d-4e28-92db-0e7327784ca4 HTTP/1.1" from 174.109.104.187 @ Sun Mar  3 00:34:09 2024
34: not in cache
34: Requesting "GET http://run.mocky.io/v3/056e5bc1-b39d-4e28-92db-0e7327784ca4 HTTP/1.1" from server run.mocky.io:80
34: Received "HTTP/1.1 200 OK" from server run.mocky.io:80
34: NOTE Cache-Control: max-age=120
34: cached, expires at Sun Mar  3 00:36:10 2024
34: Responding "HTTP/1.1 200 OK" to client
request after 30 seconds:
35: "GET http://run.mocky.io/v3/056e5bc1-b39d-4e28-92db-0e7327784ca4 HTTP/1.1" from 174.109.104.187 @ Sun Mar  3 00:34:33 2024
35: in cache, valid
35: Responding the response to the client
request after a while:
41: "GET http://run.mocky.io/v3/056e5bc1-b39d-4e28-92db-0e7327784ca4 HTTP/1.1" from 174.109.104.187 @ Sun Mar  3 00:36:33 2024
41: in cache, but expired at Sun Mar  3 00:36:10 2024
41: Requesting re-validation "GET http://run.mocky.io/v3/056e5bc1-b39d-4e28-92db-0e7327784ca4 HTTP/1.1" from the server
41: Received "HTTP/1.1 200 OK" from server run.mocky.io:80
41: NOTE Cache-Control: max-age=120
41: cached, expires at Sun Mar  3 00:38:33 2024
41: NOTE: Re-validation succeeds, update the cache
41: Responding "HTTP/1.1 200 OK" to the client
test pass!!

2.redirect
122: "GET http://run.mocky.io/v3/c2d8e6bf-6774-46ff-b117-83ac0e3baf26 HTTP/1.1" from 174.109.104.187 @ Sun Mar  3 01:53:09 2024
122: not in cache
122: Requesting "GET http://run.mocky.io/v3/c2d8e6bf-6774-46ff-b117-83ac0e3baf26 HTTP/1.1" from server run.mocky.io:80
122: Received "HTTP/1.1 301 Moved Permanently" from server run.mocky.io:80
122: not cacheable because status code is not 200
122: Responding "HTTP/1.1 301 Moved Permanently" to client
testcase not pass!!

revised:
10: "GET http://run.mocky.io/v3/3bcafe0b-b8dc-4800-8833-09334f222b1c HTTP/1.1" from 174.109.104.187 @ Sun Mar  3 02:11:12 2024
10: not in cache
10: Requesting "GET http://run.mocky.io/v3/3bcafe0b-b8dc-4800-8833-09334f222b1c HTTP/1.1" from server run.mocky.io:80
10: Received "HTTP/1.1 301 Moved Permanently" from server run.mocky.io:80
10: cached, but requires re-validation
10: Responding "HTTP/1.1 301 Moved Permanently" to client

3.Client Error
Status Code: 404 Not Found
Content Type: text/html
Response Body: <html><body>Page Not Found</body></html>
This test case is used to verify how the caching proxy handles requests for resources that do not exist.

logs:
130: "GET http://run.mocky.io/v3/a9d48de5-7eee-4c67-945e-cdbb5d4884bb HTTP/1.1" from 174.109.104.187 @ Sun Mar  3 03:56:44 2024
130: not in cache
130: Requesting "GET http://run.mocky.io/v3/a9d48de5-7eee-4c67-945e-cdbb5d4884bb HTTP/1.1" from server run.mocky.io:80
130: Received "HTTP/1.1 404 Not Found" from server run.mocky.io:80
130: not cacheable because status code is not 200 or 301
130: Responding "HTTP/1.1 404 Not Found" to client

test pass!!

4. Setting ETag and Cache Validation
Status Code: 200 OK
Content Type: text/html
Response Body: <html><body>Content with ETag</body></html>
Header Information: ETag: "123456"
This test case is used to verify whether the caching proxy supports the ETag validation mechanism.

log:
59: "GET http://run.mocky.io/v3/83baafbf-bb21-4d96-8298-3c88cd0256b8 HTTP/1.1" from 174.109.104.187 @ Sun Mar  3 00:51:17 2024
59: not in cache
59: Requesting "GET http://run.mocky.io/v3/83baafbf-bb21-4d96-8298-3c88cd0256b8 HTTP/1.1" from server run.mocky.io:80
59: Received "HTTP/1.1 200 OK" from server run.mocky.io:80
59: NOTE ETag: "123456"
59: cached, but requires re-validation
59: Responding "HTTP/1.1 200 OK" to client

64: "GET http://run.mocky.io/v3/83baafbf-bb21-4d96-8298-3c88cd0256b8 HTTP/1.1" from 174.109.104.187 @ Sun Mar  3 00:52:32 2024
64: in cache, but requires re-validation
64: Requesting re-validation "GET http://run.mocky.io/v3/83baafbf-bb21-4d96-8298-3c88cd0256b8 HTTP/1.1" from the server
64: Received "HTTP/1.1 200 OK" from server run.mocky.io:80
64: NOTE ETag: "123456"
64: cached, but requires re-validation
64: NOTE: Re-validation succeeds, update the cache
64: Responding "HTTP/1.1 200 OK" to the client

test not pass!!not Responding 304 Not Modified as expected.Testing with curl:
```bash
curl -i http://run.mocky.io/v3/83baafbf-bb21-4d96-8298-3c88cd0256b8
```

output:
HTTP/1.1 200 OK
ETag: "123456"
Content-Type: text/html; charset=UTF-8
Date: Sun, 03 Mar 2024 01:02:15 GMT
Content-Length: 43
Sozu-Id: 01HR0XAEKWEMXY0G2YXSX7P7XP

<html><body>Content with ETag</body></html>% 


```bash                                   
curl -i -H 'If-None-Match: "123456"' http://run.mocky.io/v3/83baafbf-bb21-4d96-8298-3c88cd0256b8
```

HTTP/1.1 200 OK
ETag: "123456"
Content-Type: text/html; charset=UTF-8
Date: Sun, 03 Mar 2024 01:03:17 GMT
Content-Length: 43
Sozu-Id: 01HR0XCBD91HQADDPVXEJE5HBK

conclusion: mocky cannot deal with '304 Not Modified'

5.expired content
151: "GET http://run.mocky.io/v3/5ddafa51-37f0-4afb-bc58-1390b678d100 HTTP/1.1" from 174.109.104.187 @ Sun Mar  3 04:01:03 2024
151: in cache, but requires re-validation
151: Requesting re-validation "GET http://run.mocky.io/v3/5ddafa51-37f0-4afb-bc58-1390b678d100 HTTP/1.1" from the server
151: Received "HTTP/1.1 200 OK" from server run.mocky.io:80
151: NOTE Cache-Control: no-cache
151: cached, but requires re-validation
151: NOTE: Re-validation succeeds, update the cache
151: Responding "HTTP/1.1 200 OK" to the client

Test not pass!!(didn't handle no-cache properly)
after code revision:
11: "GET http://run.mocky.io/v3/5ddafa51-37f0-4afb-bc58-1390b678d100 HTTP/1.1" from 174.109.104.187 @ Sun Mar  3 04:19:25 2024
11: not in cache
11: Requesting "GET http://run.mocky.io/v3/5ddafa51-37f0-4afb-bc58-1390b678d100 HTTP/1.1" from server run.mocky.io:80
11: Received "HTTP/1.1 200 OK" from server run.mocky.io:80
11: NOTE Cache-Control: no-cache
11: not cacheable because no-cache
11: Responding "HTTP/1.1 200 OK" to client

Test pass!!

6. last Modified
35: "GET http://run.mocky.io/v3/748ca5ac-acf4-4d6e-af32-8566d2a8df88 HTTP/1.1" from 174.109.104.187 @ Sun Mar  3 04:35:54 2024
35: in cache, but requires re-validation
35: Requesting re-validation "GET http://run.mocky.io/v3/748ca5ac-acf4-4d6e-af32-8566d2a8df88 HTTP/1.1" from the server
35: Received "HTTP/1.1 200 OK" from server run.mocky.io:80
35: NOTE Last-Modified: Wed, 21 Oct 2015 07:28:00 GMT
35: cached, but requires re-validation
35: Cache updated with the new content from the origin server.

test pass!!


chucnked
(base) zichun@Zichuns-MBP ~ % curl -i -x vcm-38363.vm.duke.edu:12345 http://www.httpwatch.com/httpgallery/chunked/chunkedimage.aspx

HTTP/1.1 200 OK
Content-Type: image/jpeg; charset=utf-8
Date: Sun, 03 Mar 2024 04:42:39 GMT
Server: Microsoft-IIS/10.0
Cache-Control: no-cache, no-store
Expires: -1
Pragma: no-cache
Trailer: X-HttpWatch-Sample
Transfer-Encoding: chunked
X-AspNet-Version: 4.0.30319
X-Powered-By: ASP.NET
Arr-Disable-Session-Affinity: True

Warning: Binary output can mess up your terminal. Use "--output -" to tell 
Warning: curl to output it to your terminal anyway, or consider "--output 
Warning: <FILE>" to save to a file.

test passÔºÅ

test POST
(base) zichun@Zichuns-MBP ~ % curl -i -X POST http://httpbin.org/post \
     -H "Content-Type: application/json" \
     -d '{"name":"John", "age":30}'

HTTP/1.1 200 OK
Date: Sun, 03 Mar 2024 04:48:47 GMT
Content-Type: application/json
Content-Length: 456
Connection: keep-alive
Server: gunicorn/19.9.0
Access-Control-Allow-Origin: *
Access-Control-Allow-Credentials: true

{
  "args": {}, 
  "data": "{\"name\":\"John\", \"age\":30}", 
  "files": {}, 
  "form": {}, 
  "headers": {
    "Accept": "*/*", 
    "Content-Length": "25", 
    "Content-Type": "application/json", 
    "Host": "httpbin.org", 
    "User-Agent": "curl/8.1.1", 
    "X-Amzn-Trace-Id": "Root=1-65e4012f-175bce407768646d798fd9f7"
  }, 
  "json": {
    "age": 30, 
    "name": "John"
  }, 
  "origin": "174.109.104.187", 
  "url": "http://httpbin.org/post"
}
test pass!
